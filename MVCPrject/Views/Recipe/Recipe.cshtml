@using MVCPrject.Models
@model PaginatedList<Recipe>

@{
    ViewData["Title"] = "Recipes";
}
@section Styles {
    <link rel="stylesheet" href="~/css/recipe.css" />
}

<!-- Header Navigation -->
<div class="p-4 d-flex justify-content-between align-items-center">
    <h1 class=" text-start fs-1 fw-normal">Explore Recipe</h1>
    <div class="d-flex align-items-center gap-5">
        @if (User.Identity?.IsAuthenticated == true && !string.IsNullOrEmpty(ViewBag.UserName))
        {
            <div class="d-flex align-items-center gap-3">
                <h2 class="fs-5 mb-0">Welcome, @ViewBag.UserName!</h2>
                <div class="dropdown">
                    <button class="btn btn-link p-0" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                        <img src="@(ViewBag.UserProfileImage ?? "~/img/image.png")" 
                             alt="Profile" 
                             class="border rounded-pill" 
                             style="width: 48px; height: 48px; object-fit: cover;"
                             onerror="this.src='~/img/image.png';">
                    </button>
                    <ul class="dropdown-menu dropdown-menu-end">
                        <li><a class="dropdown-item" href="/Profile/Profile">My Profile</a></li>
                        <li><a class="dropdown-item" href="/Recipe/MyRecipes">My Recipes</a></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><a class="dropdown-item" href="/Landing/Logout">Logout</a></li>
                    </ul>
                </div>
            </div>
        }
        else if (User.Identity?.IsAuthenticated == true)
        {
            <div class="d-flex align-items-center gap-3">
                <h2 class="fs-5 mb-0">Welcome, User!</h2>
                <img src="~/img/image.png" alt="Profile" class="border rounded-pill" style="width: 48px; height: 48px; object-fit: cover;">
            </div>
        }
        else
        {
            <div class="d-flex align-items-center gap-3">
                <a href="/Landing/Login" class="btn btn-primary">Please log in</a>
                <img src="~/img/image.png" alt="Profile" class="border rounded-pill" style="width: 48px; height: 48px; object-fit: cover;">
            </div>
        }
    </div>
</div>


<!-- Main Content Container -->
<div class=" overflow-auto" style="height: calc(100vh - 124px);">
    <div class="container">


        <div class="row mb-4">
            <!-- Search Bar -->
            <div class="d-flex justify-content-between align-items-center mb-3 ">
                <div class="col-md-4 d-flex justify-content-between gap-3">
                    <a asp-controller="Recipe" asp-action="RecipeAction" asp-route-source="cookbook"
                        class="text-decoration-none text-reset fs-4 fw-medium p-3 @(ViewBag.Source == "cookbook" ? "border-bottom border-primary" : "")">
                        Cookbook
                    </a>
                    <a asp-controller="Recipe" asp-action="RecipeAction" asp-route-source="user"
                        class="text-decoration-none text-reset fs-4 fw-medium p-3 @(ViewBag.Source == "user" ? "border-bottom border-primary" : "")">
                        User's Recipes
                    </a>
                </div>

                <div class="col-md-4 d-flex justify-content-end gap-3 px-3">
                    <button
                        class="btn border border-2 border-opacity-75 fw-medium text-secondary fs-6 d-flex align-items-center justify-content-center gap-2"
                        onclick="toggleFilters()">
                        <i data-feather="filter"></i>
                        <span class="mb-0">Filter</span>
                    </button>
                </div>
                <div class="col-md-4">
                    <form asp-controller="Recipe" asp-action="Recipe" method="get"
                        class="input-group p-2 border rounded-4 bg-dark-subtle d-flex align-items-center gap-2">
                        <i data-feather="search"></i>
                        <input type="text" name="keywords"
                            class="fs-6 form-control border-0 bg-dark-subtle search-input rounded"
                            placeholder="Search For recipe, users, posts, ingredients....." />
                        <button type="submit" class="rounded text-white fw-medium border-0 py-1 px-3"
                            style="background-color: #EC433E;">Search</button>
                    </form>
                </div>
            </div>

            <!-- Recipe Filter Navigation - Simple Version -->
            <div class="mb-4" id="filterSection" style="display: none;">
                <button onclick="addKeyword('Dinner')"
                    class="btn btn-warning rounded-3 text-white fw-medium fs-6 py-0 px-2">Dinner</button>
                <button onclick="addKeyword('Main Course')"
                    class="btn btn-warning rounded-3 text-white fw-medium fs-6 py-0 px-2">Main Course</button>
                <button onclick="addKeyword('Dessert')"
                    class="btn btn-warning rounded-3 text-white fw-medium fs-6 py-0 px-2">Dessert</button>
                <button onclick="addKeyword('Breakfast')"
                    class="btn btn-warning rounded-3 text-white fw-medium fs-6 py-0 px-2">Breakfast</button>
                <button onclick="addKeyword('Lunch')"
                    class="btn btn-warning rounded-3 text-white fw-medium fs-6 py-0 px-2">Lunch</button>
                <button onclick="addKeyword('Snack')"
                    class="btn btn-warning rounded-3 text-white fw-medium fs-6 py-0 px-2">Snack</button>
                <button onclick="addKeyword('Appetizer')"
                    class="btn btn-warning rounded-3 text-white fw-medium fs-6 py-0 px-2">Appetizer</button>
                <button onclick="addKeyword('Side Dish')"
                    class="btn btn-warning rounded-3 text-white fw-medium fs-6 py-0 px-2">Side Dish</button>
                <button onclick="addKeyword('Soup')"
                    class="btn btn-warning rounded-3 text-white fw-medium fs-6 py-0 px-2">Soup</button>
                <button onclick="addKeyword('Salad')"
                    class="btn btn-warning rounded-3 text-white fw-medium fs-6 py-0 px-2">Salad</button>
                <button onclick="addKeyword('Healthy')"
                    class="btn btn-warning rounded-3 text-white fw-medium fs-6 py-0 px-2">Healthy</button>
                <button onclick="addKeyword('Vegetarian')"
                    class="btn btn-warning rounded-3 text-white fw-medium fs-6 py-0 px-2">Vegetarian</button>
                <button onclick="addKeyword('Vegan')"
                    class="btn btn-warning rounded-3 text-white fw-medium fs-6 py-0 px-2">Vegan</button>
                <button onclick="addKeyword('Comfort Food')"
                    class="btn btn-warning rounded-3 text-white fw-medium fs-6 py-0 px-2">Comfort
                    Food</button>

                <button onclick="clearFilters()" class="btn btn-outline-secondary btn-sm fw-medium fs-6 py-0 px-2">Clear
                    All</button>
            </div>

            <script>
                // Toggle filter visibilityAdd commentMore actions
                function toggleFilters() {
                    const filterSection = document.getElementById('filterSection');
                    const filterButton = document.querySelector('[onclick="toggleFilters()"]');

                    if (filterSection.style.display === 'none' || filterSection.style.display === '') {
                        // Show filters with smooth animation
                        filterSection.style.display = 'block';
                        filterSection.style.opacity = '0';
                        filterSection.style.transform = 'translateY(-10px)';

                        // Animate in
                        setTimeout(() => {
                            filterSection.style.transition = 'all 0.3s ease';
                            filterSection.style.opacity = '1';
                            filterSection.style.transform = 'translateY(0)';
                        }, 10);

                        // Update button appearance
                        filterButton.classList.add('active-filter');
                    } else {
                        // Hide filters with animation
                        filterSection.style.transition = 'all 0.3s ease';
                        filterSection.style.opacity = '0';
                        filterSection.style.transform = 'translateY(-10px)';

                        setTimeout(() => {
                            filterSection.style.display = 'none';
                        }, 300);

                        // Update button appearance
                        filterButton.classList.remove('active-filter');
                    }
                }

                // Add keyword to the URL and refresh the page
                function addKeyword(keyword) {
                    var keywords = new URLSearchParams(window.location.search).get('keywords') || '';
                    var list = keywords ? keywords.split(',') : [];

                    if (!list.includes(keyword)) {
                        list.push(keyword);
                        window.location.href = '/Recipe/Recipe?keywords=' + list.join(',') + '&pageNumber=1';
                    }
                }

                function clearFilters() {
                    window.location.href = '/Recipe/Recipe?pageNumber=1';
                }

                // Toggle like/unlike functionality
                async function toggleLike(recipeId, element) {
                    const heartIcon = element.querySelector('.heart-icon');
                    const isLiked = heartIcon.style.fill === 'rgb(220, 53, 69)' || heartIcon.getAttribute('data-liked') === 'true';

                    try {
                        const endpoint = isLiked ? '/Recipe/Unlike' : '/Recipe/Like';
                        const response = await fetch(endpoint, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ recipeId: recipeId })
                        });

                        const result = await response.json();

                        if (result.success) {
                            // Update the like count
                            const likeCountSpan = element.querySelector('.like-count');
                            likeCountSpan.textContent = result.likeCount;

                            // Toggle heart appearance
                            if (isLiked) {
                                // Unlike - make heart empty
                                heartIcon.style.fill = 'none';
                                heartIcon.style.stroke = '#dc3545';
                                heartIcon.setAttribute('data-liked', 'false');
                            } else {
                                // Like - make heart filled
                                heartIcon.style.fill = '#dc3545';
                                heartIcon.style.stroke = '#dc3545';
                                heartIcon.setAttribute('data-liked', 'true');
                            }
                        }
                    } catch (error) {
                        console.error('Error toggling like:', error);
                        showToast('An error occurred while updating the like.', 'error');
                    }
                }

                // Simple toast notification function
                function showToast(message, type) {
                    // Create toast element
                    const toast = document.createElement('div');
                    toast.className = `alert alert-${type === 'success' ? 'success' : type === 'warning' ? 'warning' : 'danger'} position-fixed`;
                    toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
                    toast.textContent = message;

                    // Add to page
                    document.body.appendChild(toast);

                    // Remove after 3 seconds
                    setTimeout(() => {
                        toast.remove();
                    }, 3000);
                }

                // Save recipe function
                async function saveRecipe(recipeId) {
                    try {
                        const response = await fetch('/Recipe/SaveRecipe', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ recipeId: recipeId })
                        });

                        const result = await response.json();
                        if (result.success) {
                            showToast('Recipe saved successfully!', 'success');
                        } else {
                            showToast('Failed to save recipe: ' + result.message, 'error');
                        }
                    } catch (error) {
                        console.error('Error saving recipe:', error);
                        showToast('An error occurred while saving the recipe.', 'error');
                    }
                }
            </script>


            @if (!Model.Any())
            {
                <!-- Empty State -->
                <div class="row justify-content-center">
                    <div class="col-md-6">
                        <div class="card text-center">
                            <div class="card-body">
                                <h4 class="card-title">No Recipes Available</h4>
                                <p class="card-text">No recipes available at the moment.</p>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {


                <!-- Recipe Grid -->
                <div class="row">
                    @foreach (var recipe in Model)
                    {
                        <div class="col-sm-6 col-md-3 col-lg-3 mb-4">
                            <div class="card recipe-card h-100 shadow-sm border-0 rounded-4 position-relative mx-3">
                                <!-- Recipe Type Badge -->
                                @if (!string.IsNullOrEmpty(recipe.RecipeType))
                                {
                                    <span class="badge bg-primary position-absolute top-0 start-0 m-2 z-index-1">
                                        @recipe.RecipeType
                                    </span>
                                }
                                
                                <!-- Image -->
                                <img class="card-img-top rounded-top-4" 
                                     src="@(string.IsNullOrEmpty(recipe.RecipeImage) ? "~/img/default-recipe.jpg" : recipe.RecipeImage)" 
                                     alt="@recipe.RecipeName"
                                     style="height: 200px; object-fit: cover;"
                                     onerror="this.src='~/img/default-recipe.jpg';">

                                <div class="card-body d-flex flex-column justify-content-between">
                                    <!-- Title -->
                                    <h5 class="card-title fw-bold mb-2" title="@recipe.RecipeName">
                        @(recipe.RecipeName.Length > 25 ? recipe.RecipeName.Substring(0, 25) + "..." : recipe.RecipeName)
                    </h5>
                                    <div>
                                        <!-- Author and time -->
                                        <div class="d-flex align-items-center mb-2 text-secondary" style="font-size: 0.95rem;">
                                            <i data-feather="user" class="me-1"></i>
                                            <span class="me-3">By @(recipe.Author?.Name ?? "Unknown Chef")</span>
                                        </div>
                                        <div class="d-flex align-items-center mb-2 text-secondary" style="font-size: 0.95rem;">
                                            <i data-feather="clock" class="me-1"></i>
                                            <span>@(recipe.TotalTimeMin > 0 ? recipe.TotalTimeMin + " min" : "Quick recipe")</span>
                                        </div>
                                        <!-- Likes and button -->
                                        <div class="d-flex align-items-center mt-auto justify-content-between">
                                            @if (User.Identity?.IsAuthenticated == true)
                                        {
                                            <div class="d-flex align-items-center text-danger like-container"
                                                    style="cursor: pointer;" onclick="toggleLike(@recipe.RecipeID, this)">
                                                    <i data-feather="heart" class="me-1 heart-icon" data-liked="false"
                                                        style="fill: none; stroke: #dc3545;"></i>
                                                    <span class="like-count">@(((IDictionary<int, int>)ViewBag.LikeCounts)[recipe.RecipeID])</span>
                                                </div>
                                        }
                                        else
                                        {
                                            <div class="d-flex align-items-center text-muted">
                                                <i data-feather="heart" class="me-1"></i>
                                                <span>@(((IDictionary<int, int>)ViewBag.LikeCounts)[recipe.RecipeID])</span>
                                            </div>
                                        }
                                        <div class="d-flex gap-2">
                                            <a asp-controller="Recipe" asp-action="Details" asp-route-id="@recipe.RecipeID"
                                                class="btn btn-danger rounded-pill px-3 py-1 fw-medium btn-sm">View</a>
                                            @if (User.Identity?.IsAuthenticated == true)
                                            {
                                                <button class="btn btn-outline-secondary rounded-pill px-3 py-1 btn-sm" 
                                                        onclick="saveRecipe(@recipe.RecipeID)" title="Save Recipe">
                                                    <i data-feather="bookmark" style="width: 14px; height: 14px;"></i>
                                                </button>
                                            }
                                        </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <!-- Pagination Controls -->
                @if (Model.TotalPages > 1)
                {
                    <nav aria-label="Recipe pagination" class="mt-4">
                        <ul class="pagination justify-content-center">
                            @if (Model.HasPreviousPage)
                            {
                                <li class="page-item custom-nav">
                                    <a class="page-link"
                                        href="@Url.Action("RecipeAction", new { pageNumber = Model.PageIndex - 1, keywords = ViewBag.CurrentKeywords, source = ViewBag.Source })">
                                        <i data-feather="chevron-left"></i> Previous
                                    </a>
                                </li>
                            }
                            else
                            {
                                <li class="page-item disabled">
                                    <span class="page-link bg-white"></span>
                                </li>
                            }
                            @{
                                int startPage = Math.Max(1, Model.PageIndex - 2);
                                int endPage = Math.Min(Model.TotalPages, Model.PageIndex + 2);
                            }

                            @if (startPage > 1)
                            {
                                <li class="page-item border-0">
                                    <a class="page-link"
                                        href="@Url.Action("RecipeAction", new { pageNumber = 1, keywords = ViewBag.CurrentKeywords, source = ViewBag.Source })">1</a>
                                </li>
                                @if (startPage > 2)
                                {
                                    <li class="page-item disabled">
                                        <span class="page-link">...</span>
                                    </li>
                                }
                            }

                            @for (int i = startPage; i <= endPage; i++)
                            {
                                <li class="page-item @(i == Model.PageIndex ? "active" : "")">
                                    <a class="page-link"
                                        href="@Url.Action("RecipeAction", new { pageNumber = i, keywords = ViewBag.CurrentKeywords, source = ViewBag.Source })">@i</a>
                                </li>
                            }

                            @if (endPage < Model.TotalPages)
                            {
                                @if (endPage < Model.TotalPages - 1)
                                {
                                    <li class="page-item disabled">
                                        <span class="page-link">...</span>
                                    </li>
                                }
                                <li class="page-item">
                                    <a class="page-link"
                                        href="@Url.Action("RecipeAction", new { pageNumber = Model.TotalPages, keywords = ViewBag.CurrentKeywords, source = ViewBag.Source })">@Model.TotalPages</a>
                                </li>
                            }

                            @if (Model.HasNextPage)
                            {
                                <li class="page-item custom-nav">
                                    <a class="page-link"
                                        href="@Url.Action("RecipeAction", new { pageNumber = Model.PageIndex + 1, keywords = ViewBag.CurrentKeywords, source = ViewBag.Source })">
                                        Next <i data-feather="chevron-right"></i>
                                    </a>
                                </li>
                            }
                            else
                            {
                                <li class="page-item disabled">
                                    <span class="page-link">Next <i data-feather="chevron-right"></i></span>
                                </li>
                            }
                        </ul>
                    </nav>
                }
            }
        </div>
    </div>
</div>